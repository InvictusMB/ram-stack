type PickInjected<K> = import('@ram-stack/context').PickInjected<K>;

namespace Injected {
<%= injectedId.map(v => '  ' + v ).join(';\n') %><%= injectedId.length ? ';' : '    // to be generated...' %>
  export const Shell = 'Shell' as const;
  export const ContainerContext = 'ContainerContext' as const;

  namespace classes {
    export * from '@ram-stack/context/classes';
  }
}

declare module '@ram-stack/context/classes' {
<%= classes.map(v => '  ' + v).join(';\n') %><%= top.length ? ';' : '  // to be generated...' %>
}

declare module '@ram-stack/context' {
  type PickInjected<K extends (keyof InjectedDependencies)[]> = Pick<InjectedDependencies, K[number]>

  type InferProps<C> = C extends import('react').ComponentType<infer P> ? P : never;
  type OwnKeys<T, K> = Extract<K, keyof T>;
  // WithOptional inspired by https://github.com/Microsoft/TypeScript/issues/25760#issuecomment-405931434
  type WithOptional<T, K> = Omit<T, OwnKeys<T, K>> & Partial<Pick<T, OwnKeys<T, K>>>;
  type ComponentWithDependencies<T> = import('react').FunctionComponent<T> & {
    dependencies: readonly (keyof InjectedDependencies)[]
  }
  type ComponentDependencies<T> = T extends {dependencies: infer U} ? U : never;

  type WrappedComponent<T> = T extends ComponentWithDependencies<infer U>
    ? import('react').FunctionComponent<WithOptional<InferProps<T>, ComponentDependencies<T>[number]>>
    : T;

  type InjectedDependencies = {
<%= top.map(v => '    ' + v).join(',\n') %><%= top.length ? ',' : '    // to be generated...' %>
    Shell: Shell,
    ContainerContext: React.Context<import('@ram-stack/core').Container<InjectedDependencies>>,
  };

  type Shell = {
<%= shell.map(v => '    ' + v).join(',\n') %><%= shell.length ? ',' : '    // to be generated...' %>
  };
}

type PickInjected<K> = import('@ram-stack/context').PickInjected<K>;

namespace Injected {
<%= injectedId.map(v => '  ' + v ).join(';\n') %><%= injectedId.length ? ';' : '    // to be generated...' %>
  export const Shell = 'Shell' as const;
  export const ContainerContext = 'ContainerContext' as const;

  namespace classes {
    export * from '@ram-stack/context/classes';
  }
}

declare module '@ram-stack/context/classes' {
<%= classes.map(v => '  ' + v).join(';\n') %><%= top.length ? ';' : '  // to be generated...' %>
}

declare module '@ram-stack/context' {
  import type {React, WithInjected} from '@ram-stack/core';

  type PickInjected<K extends (keyof InjectedDependencies)[]> = Pick<InjectedDependencies, K[number]>

  type InjectedDependencies = {
<%= top.map(v => '    ' + v).join(',\n') %><%= top.length ? ',' : '    // to be generated...' %>
    Shell: Shell,
    ContainerContext: React.Context<import('@ram-stack/core').Container<InjectedDependencies>>,
  };

  type Shell = {
<%= shell.map(v => '    ' + v).join(',\n') %><%= shell.length ? ',' : '    // to be generated...' %>
  };
}
